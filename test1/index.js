// ***** ------ SUMMON FAMILIAR ------ ***** //

// *** ---  GLOBAL VARIABLES --- *** //

// RARITY
var numRarity = Math.floor(Math.random() * 18) + 1
var rarity

// CLASS
var numMonsterClass = Math.floor(Math.random() * 18) + 1
var monsterClasses = ["pest", "creature", "demon", "elder god"]
var monsterClass

// TYPE
var monsterType
var monsterTypeList = [
  pest = [
    "bee", "mouse", "snake"
  ],
  creature = [
    "moose", "wolf", "bear"
  ],
  demon = [
    "ghost", "goblin", "succubus"
  ],
  elder = [
    "gryphon", "dragon", "deity"
  ]
]

// monster types
var pestMonsters = monsterTypeList[0]
var creatureMonsters = monsterTypeList[1]
var demonMonsters = monsterTypeList[2]
var elderGodMonsters = monsterTypeList[3]

// STATS
var strengthStatBase
var healthStatBase
var staminaStatBase
var magicStatBase
var speedStatBase

// primary stat variables
var strength
var health
var stamina
var magic
var speed

// start health
var heroStartHealth
var enemyStartHealth

// UNDEAD
var undead = false

// FAMILIARS
var heroFamiliar
var enemyFamiliar
var bossEnemyFamiliar
var description

// *** ---  RARITY --- *** //

function rollRarity() {
    // generate number between 1 - 18
    numRarity = Math.floor(Math.random() * 18) + 1
    console.log(numRarity);
    // test rarity against the number rolled
    if (numRarity <= 9) {
      // Common, roll between 1 - 9 = 50% chance.
      console.log("COMMON, roll between 1 - 9 = 50% chance.")
      rarity = "common"

    } else if (numRarity <= 14) {
      // Uncommon, roll between 10 - 14 = 28% chance.
      console.log("UNCOMMON, roll between 10 - 14 = 28% chance.")
      rarity = "uncommon"

    } else if (numRarity <= 17) {
      // Rare, roll between 15 - 17 = 17% chance.
      console.log("RARE, roll between 15 - 17 = 17% chance.")
      rarity = "rare"

    } else {
      // Legendary, roll 18 = 5% chance.
      console.log("LEGENDARY, roll 18 = 5% chance.")
      rarity = "legendary"
    } // end of conditionals
    return rarity
  } // end of function

// ADJUST STATS BASED ON RARITY
function adjustRarityStats() {
  if (rarity == "legendary") {
    // LEGENDARY
    strength = strength + 15
    health = health + 50
    stamina = stamina + 8
    magic = magic + 1
    speed = speed - 5

  } else if (rarity == "rare") {
    // RARE
    strength = strength + 8
    health = health + 25
    stamina = stamina + 5
    magic = magic + Math.round(Math.random())
    speed = speed + 2

  } else if (rarity == "uncommon") {
    // UNCOMMON
    strength = strength + 3
    health = health + 15
    stamina = stamina + 2
    speed = speed + 1

  } else {
    speed = speed + 3
  } // COMMON value mostly stays as the stat generated by adjusting for class & type
}

// *** ---  MONSTER CLASS & TYPE --- *** //

// roll a class based on percentage probability
function rollMonsterClass() {
    // generate number between 1 - 18
    numMonsterClass = Math.floor(Math.random() * 18) + 1
    console.log(numMonsterClass);
    // test class against the number rolled
    if (numMonsterClass <= 8) {
      // Pest, roll between 1 - 9 = 50% chance.
      console.log("PEST, roll between 1 - 8 = 44% chance.")
      monsterClass = "pest"
    } else if (numMonsterClass <= 14) {
      // Creature, roll between 10 - 14 = 28% chance.
      console.log("CREATURE, roll between 9 - 14 = 33% chance.")
      monsterClass = "creature"
    } else if (numMonsterClass <= 17) {
      // Demon, roll between 15 - 17 = 17% chance.
      console.log("DEMON, roll between 15 - 17 = 17% chance.")
      monsterClass = "demon"
    } else {
      // Elder god, roll 18 = 5% chance.
      console.log("ELDER GOD, roll 18 = 5% chance.")
      monsterClass = "elder god"
    } // end of conditionals
    return monsterClass
  } // end of function

function rollBossMonsterClass() {
  monsterClass = "elder god"
  return monsterClass
}

// roll a random monster type within a specific class
function rollMonsterType() {
  // roll and return monsterClass
  rollMonsterClass();
  var randomType
    // conditionals...
  if (monsterClass == "pest") {
    // PEST CLASS
    var i = Math.floor(Math.random() * pestMonsters.length)
    monsterType = pestMonsters[i]
  } else if (monsterClass == "creature") {
    // CREATURE CLASS
    var i = Math.floor(Math.random() * creatureMonsters.length)
    monsterType = creatureMonsters[i]
  } else if (monsterClass == "demon") {
    // DEMON CLASS
    var i = Math.floor(Math.random() * demonMonsters.length)
    monsterType = demonMonsters[i]
  } else {
    // ELDER GOD CLASS
    var i = Math.floor(Math.random() * elderGodMonsters.length)
    monsterType = elderGodMonsters[i]
  } // end of conditionals
  console.log(monsterType.toUpperCase() + ", randomly selected from array of types within the monster class.");
  return monsterType
}

function rollBossMonsterType() {
  // ELDER GOD CLASS
  var i = Math.floor(Math.random() * elderGodMonsters.length)
  monsterType = elderGodMonsters[i]
  return monsterType
}

// *** ---  STATS --- *** //

// check if undead
function checkUndead() {
  if (magic <= 0) {
    undead = true;
    health = health + 200
    speed = speed - 8
    if (magic <= -1) {
      magic = 0
    }
  }
}

// Roll for base stats
function rollBaseStats() {
  // Strength: random number 5 - 10
  strengthStatBase = Math.floor(Math.random() * 5) + 5
    // Health: random number 25 - 50
  healthStatBase = Math.floor(Math.random() * 50) + 25
    // Stamina: random number 5 - 10
  staminaStatBase = Math.floor(Math.random() * 10) + 5
    // Magic: random number 0 - 3
  magicStatBase = Math.floor(Math.random() * 4)
    // Speed: random number 10 - 25
  speedStatBase = Math.floor(Math.random() * 25) + 10
}

// roll stats for familiar
function rollStatsForMonster() {

  rollBaseStats(); // will define standard base stats in format ___BaseStat
  rollMonsterType(); // will return generated monsterClass & generated monsterType
  rollRarity(); // will return generated rarity

  if (monsterClass == "pest") {
    strength = strengthStatBase
    health = healthStatBase + 50
    stamina = staminaStatBase + 15
    magic = magicStatBase + Math.round(Math.random())
    speed = speedStatBase + 10
  } // end of IF PEST conditional

  if (monsterClass == "creature") {
    strength = strengthStatBase + 5
    health = healthStatBase + 75
    stamina = staminaStatBase + 10
    magic = magicStatBase + Math.round(Math.random())
    speed = speedStatBase + 5
  } // end of IF CREATURE conditional

  if (monsterClass == "demon") {
    strength = strengthStatBase + 10
    health = healthStatBase + 150
    stamina = staminaStatBase + 2
    magic = magicStatBase + (Math.round(Math.random()) + 1) // adds 1 or 2 if demon
    speed = speedStatBase + 4
  } // end of IF DEMON conditional

  if (monsterClass == "elder god") {
    strength = strengthStatBase + 30
    health = healthStatBase + 300
    stamina = staminaStatBase + 1
    magic = magicStatBase + (Math.round(Math.random()) + 2) // adds 2 or 3 if elder god
    speed = speedStatBase + 2
  } // end of IF ELDER GOD conditional

  adjustRarityStats();
}

// final function to roll for enemy stats
function rollStatsForEnemyMonster() {
  rollStatsForMonster();
  // adjust stats
  strength = strength + 3
  health = health + 20
  stamina = stamina + 2
  speed = speed + 1
}

// final function to roll for boss stats
function rollStatsForBossMonster() {
  rollBossMonsterClass(); // defines class as elder god
  rollBossMonsterType(); // selects a random elder god type
  rollBaseStats(); // sets base stats
  rollRarity(); // defines rarity

  // reset base stats for elder god
  strength = strengthStatBase + 30
  health = healthStatBase + 300
  stamina = staminaStatBase + 1
  magic = magicStatBase + Math.round(Math.random()) // adds 0 or 1
  speed = speedStatBase + 2

  // adjusts stats based on rarity
  adjustRarityStats();

  // adjust stats for boss level
  strength = strength + 10
  health = health + 200
  stamina = stamina + 3
  magic = magic + 1
  speed = speed + 5
}

// *** --- SUMMON FAMILIAR -- *** //

function checkAnimal() {
  if ((monsterClass == "pest") || (monsterClass == "creature")) {
    magic = 0
  }
}

// familiar object
function familiar() {
  this.description = description;
  this.type = monsterType;
  this.class = monsterClass;
  this.strength = strength;
  this.health = health;
  this.maxhealth = health;
  this.stamina = stamina;
  this.magic = magic;
  this.speed = speed;
  this.undead = undead;
}

// SUMMON HERO FAMILIAR
function summonFamiliar() {
  rollStatsForMonster();
  description = rarity + " " + monsterType

  checkUndead();
  if (undead == true) {
    description = "undead " + rarity + " " + monsterType
  }

  checkAnimal();

  var newFamiliar = new familiar();

  heroFamiliar = newFamiliar
  console.log(heroFamiliar);

  undead = false
  return heroFamiliar
}

// SUMMON ENEMY FAMILIAR
function summonEnemyFamiliar() {
  rollStatsForEnemyMonster();

  description = rarity + " " + monsterType

  checkUndead();
  if (undead == true) {
    description = "undead " + rarity + " " + monsterType
  }

  checkAnimal();

  var newEnemyFamiliar = new familiar();

  enemyFamiliar = newEnemyFamiliar
  console.log(enemyFamiliar);

  undead = false
  return enemyFamiliar
}

// SUMMON BOSS ENEMY FAMILIAR
function summonBossEnemyFamiliar() {
  rollStatsForBossMonster();

  description = rarity + " " + monsterType

  checkUndead();
  if (undead == true) {
    description = "undead " + rarity + " " + monsterType
  }

  var newBossEnemyFamiliar = new familiar();

  bossEnemyFamiliar = newBossEnemyFamiliar

  undead = false
  return bossEnemyFamiliar
}

////////

// ***** ------ FAMILIAR ACTIONS ------ ***** //

// *** ---  GLOBAL VARIABLES --- *** //
var attackDamage
var magicAttackDamage

var enemyAttackDamage
var enemyMagicAttackDamage

var specialAttack
var enemySpecialAttack
var enemySpecialTurn = false
var enemySpecialCounter = 0

var evade = false
var enemyEvade = false
var evadeChance

var criticalChance

// *** ---  CRITICAL CHANCE --- *** //
function rollCriticalChance() {
  criticalChance = Math.floor(Math.random() * 99) + 1 // sets criticalChance to a random number between 1 - 99
  if (heroFamiliar.stamina >= criticalChance) {
    console.log("Critical hit!");
    $("#fightCriticalHit").html("Rolled " + criticalChance + " for critical hit.  This is lower than " + heroFamiliar.description.toUpperCase() + " stamina stat of " + heroFamiliar.stamina + "!  &nbsp; Critical hit landed and stamina stat lowered by 3!");
    heroFamiliar.stamina = heroFamiliar.stamina - 3
      // criticalHit = true

    console.log("Base attack damage was " + attackDamage + ", but critical damage was " + (Math.floor(attackDamage * 1.5)) + ".");
    attackDamage = Math.floor(attackDamage * 1.5);
  } else {
    $("#fightCriticalHit").html("Rolled " + criticalChance + " for critical hit.  No luck this time!");
  }

  if (heroFamiliar.stamina <= -1) {
    heroFamiliar.stamina = 0
    $("#fightCriticalHit").html("Stamina stat is 0 -- your familiar is too exhausted to land critical hits.");
  }
}

function rollEnemyCriticalChance() {
  criticalChance = Math.floor(Math.random() * 99) + 1 // sets criticalChance to a random number between 1 - 99
  if (enemyFamiliar.stamina >= criticalChance) {
    console.log("Enemy critical hit!");
    $("#fightCriticalHit").html("Enemy rolled " + criticalChance + " for critical hit.  This is lower than " + enemyFamiliar.description.toUpperCase() + " stamina stat of " + enemyFamiliar.stamina + "!  &nbsp; Critical hit landed and enemy stamina stat lowered by 3!");
    enemyFamiliar.stamina = heroFamiliar.stamina - 3
      // criticalHit = true

    console.log("Base attack damage was " + enemyAttackDamage + ", but critical damage was " + (Math.floor(enemyAttackDamage * 1.5)) + ".");
    enemyAttackDamage = Math.floor(enemyAttackDamage * 1.5);
  } else {
    $("#fightCriticalHit").html("Enemy rolled " + criticalChance + " for critical hit.  That was close!");
  }

  if (enemyFamiliar.stamina <= -1) {
    enemyFamiliar.stamina = 0
    $("#fightCriticalHit").html("Enemy stamina stat is 0 -- enemy familiar is exhausted to land critical hits.");
  }
}

// *** ---  EVADE --- *** //
function rollEvade() {
  evadeChance = Math.floor(Math.random() * 100) // sets evadeChance to a random number between 0 - 99
  if ((evadeChance == heroFamiliar.speed) || (evadeChance == heroFamiliar.speed + 1) || (evadeChance == heroFamiliar.speed + 2) || (evadeChance == heroFamiliar.speed - 1) || (evadeChance == heroFamiliar.speed - 2)) {
    evade = true
    console.log("Rolled " + evadeChance + " for evasion.  Because speed is " + heroFamiliar.speed + ", acceptable range for evasion is " + (heroFamiliar.speed - 2) + " - " + (heroFamiliar.speed + 2) + "!  Successfully evaded the attack!");
  } else {
    console.log("Rolled a " + evadeChance + " for evasion.  Because speed is " + heroFamiliar.speed + ", acceptable range for evasion is " + (heroFamiliar.speed - 2) + " - " + (heroFamiliar.speed + 2) + "!  Your familiar has been hit!");
  }
}

function rollEnemyEvade() {
  evadeChance = Math.floor(Math.random() * 100) // sets evadeChance to a random number between 0 - 99
  if ((evadeChance == enemyFamiliar.speed) || (evadeChance == enemyFamiliar.speed + 1) || (evadeChance == enemyFamiliar.speed + 2) || (evadeChance == enemyFamiliar.speed - 1) || (evadeChance == enemyFamiliar.speed - 2)) {
    enemyEvade = true
    console.log("Rolled " + evadeChance + " for enemy evasion.  Because enemy speed is " + enemyFamiliar.speed + ", acceptable range for evasion is " + (enemyFamiliar.speed - 2) + " - " + (enemyFamiliar.speed + 2) + "!  Enemy successfully evaded the attack!");
  } else {
    console.log("Rolled a " + evadeChance + " for enemy evasion.  Because enemy speed is " + enemyFamiliar.speed + ", acceptable range for evasion is " + (enemyFamiliar.speed - 2) + " - " + (enemyFamiliar.speed + 2) + "!  Enemy has been hit!");
  }
}

// *** ---  FIGHT --- *** //

// hero attacks
function heroAttack() {
    attackDamage = heroFamiliar.strength + (Math.floor(Math.random() * 10) + 1);

    rollEnemyEvade();

    if (enemyEvade === true) { // if attack is evaded...
      console.log("Enemy evaded the attack!  Enemy health remains at " + enemyFamiliar.health + " / " + enemyFamiliar.maxhealth + ".");
      enemyEvade = false

      $("#enemyHealthStat").html("<li class='listTitle'>HEALTH</li><li>" + enemyFamiliar.health + " / " + enemyFamiliar.maxhealth);

      $("#fightEvasionOrAttack").html("Rolled " + evadeChance + " to evade.  Because enemy speed is " + enemyFamiliar.speed + ", acceptable range for evasion is " + (enemyFamiliar.speed - 2) + " - " + (enemyFamiliar.speed + 2) + "! &nbsp; Enemy evaded the attack!");

    } else if (enemyEvade === false) { // if attack hits...
      rollCriticalChance();
      enemyFamiliar.health = enemyFamiliar.health - attackDamage

      if (enemyFamiliar.health <= 0) {
        $("#battleButtons").hide();
        $("#fightInstructions").hide();

        $("#battleBox").hide();
        $("#battleEndBox").show();
        $("#victory").show();

      } else {
        console.log("Enemy was hit!  Your familiar did " + attackDamage + " attack damage!");

        $("#enemyHealthStat").html("<li class='listTitle'>HEALTH</li><li>" + enemyFamiliar.health + " / " + enemyFamiliar.maxhealth);

        $("#fightEvasionOrAttack").html("Enemy was hit!  &nbsp; Your familiar did " + attackDamage + " attack damage!");
      }
    }
  } // end of heroAttack()

function specialAttack() {
  $("#fightUpdate").text("");
  $("#fightEvasionOrAttack").text("");
  $("#fightCriticalHit").text("");
  $("#attackButtons").hide();
  $("#nextRoundButton").show();

  if (heroFamiliar.class === "pest") {
    // roll for success
    var i = Math.round(Math.random())

    if (i === 1) {
      console.log("Special attack for pest, success!");
      enemyFamiliar.stamina = enemyFamiliar.stamina - 10
      $("#specialEnemyUpdate").html("Pest special attack success! &nbsp; Enemy was poisoned! &nbsp; Enemy stamina lowered by 10 points.");
    } else {
      $("#specialEnemyUpdate").html("Pest special attack failed!");
    }
  } else if (heroFamiliar.class === "creature") {
    // roll for success
    var i = Math.round(Math.random())

    if (i === 1) {
      console.log("Special attack for creature, success!");
      enemyFamiliar.strength = enemyFamiliar.strength - 10
      $("#specialEnemyUpdate").html("Creature special attack success! &nbsp; Enemy was frightened! &nbsp; Enemy strength lowered by 5 points.");
    } else {
      $("#specialEnemyUpdate").html("Creature special attack failed!");
    }
  } else if ((heroFamiliar.class === "demon") || (heroFamiliar.class === "elder god")) {
    // roll for success
    var i = Math.round(Math.random())

    if (i === 1) {
      attackDamage = heroFamiliar.strength + (Math.floor(Math.random() * 10) + 1);
      magicAttackDamage = attackDamage * heroFamiliar.magic

      enemyFamiliar.health = enemyFamiliar.health - magicAttackDamage
      $("#specialEnemyUpdate").html("Magic attack was successful!");

      if (enemyFamiliar.health <= 0) {
        $("#battleButtons").hide();
        $("#fightInstructions").hide();

        $("#battleBox").hide();
        $("#battleEndBox").show();
        $("#victory").show();

      } else {
        console.log("Enemy was hit!  Your familiar did " + magicAttackDamage + " magic damage!");

        $("#enemyHealthStat").html("<li class='listTitle'>HEALTH</li><li>" + enemyFamiliar.health + " / " + enemyFamiliar.maxhealth);

        $("#fightEvasionOrAttack").html("Enemy was hit!  &nbsp; Your familiar did " + magicAttackDamage + " magic damage!");
      }

      console.log("Special attack for demon or elder god, success!");
    } else {
      $("#specialEnemyUpdate").html("Magic attack failed!");
    }
  }
}

// enemy attacks

function rollForEnemySpecialAttack() {
  var ii = Math.floor(Math.random() * 10) + 1

  if (ii === 1) {
    enemySpecialTurn = true
  }
}

function enemySpecialAttack() {
    $("#fightUpdate").html(" ");
    $("#fightEvasionOrAttack").html(" ");
    $("#fightCriticalHit").html(" ");
    $("#attackButtons").hide();
    $("#nextRoundButton").show();

    if (enemyFamiliar.class === "pest") {
      // roll for success
      var i = Math.round(Math.random())

      if (i === 1) {
        console.log("Enemy special attack for pest, success!");
        heroFamiliar.stamina = heroFamiliar.stamina - 10
        $("#specialUpdate").html("Enemy pest special attack success! &nbsp; Your familiar was poisoned! &nbsp; Your familiar's stamina was lowered by 10 points.");
      } else {
        $("#specialUpdate").html("Enemy pest special attack failed!");
      }
    } else if (enemyFamiliar.class === "creature") {
      // roll for success
      var i = Math.round(Math.random())

      if (i === 1) {
        console.log("Enemy special attack for creature, success!");
        heroFamiliar.strength = heroFamiliar.strength - 10
        $("#specialUpdate").html("Enemy creature special attack success! &nbsp; Your familiar was frightened! &nbsp; Strength lowered by 5 points.");
      } else {
        $("#specialUpdate").html("Enemy creature special attack failed!");
      }
    } else if ((enemyFamiliar.class === "demon") || (enemyFamiliar.class === "elder god")) {
      // roll for success
      var i = Math.round(Math.random())

      if (i === 1) {
        enemyAttackDamage = enemyFamiliar.strength + (Math.floor(Math.random() * 10) + 1);
        enemyMagicAttackDamage = enemyAttackDamage * enemyFamiliar.magic

        heroFamiliar.health = heroFamiliar.health - enemyMagicAttackDamage
        $("#specialUpdate").html("Enemy magic attack was successful!");

        if (enemyFamiliar.health <= 0) {
          $("#battleButtons").hide();
          $("#fightInstructions").hide();

          $("#battleBox").hide();
          $("#battleEndBox").show();
          $("#defeat").show();
        } else {
          console.log("Your familiar was hit by a special attack!  Enemy familiar did " + enemyMagicAttackDamage + " magic damage!");

          $("#heroHealthStat").html("<li class='listTitle'>HEALTH</li><li>" + heroFamiliar.health + " / " + heroFamiliar.maxhealth);

          $("#fightEvasionOrAttack").html("Your familiar was hit by a special attack!  &nbsp; Enemy familiar did " + enemyMagicAttackDamage + " magic damage!");
        }
        console.log("Enemy special attack for demon or elder god, success!");
      } else {
        $("#specialUpdate").html("Enemy magic attack failed!");
      }
    }
  } // end of enemySpecialAttack()

function enemyAttack() {
    enemyAttackDamage = enemyFamiliar.strength + (Math.floor(Math.random() * 10) + 1)

    rollEvade();

    if (evade === true) { // if attack is evaded...
      console.log("Your familiar has evaded the attack!  Health remains at " + heroFamiliar.health + " / " + heroFamiliar.maxhealth + ".");
      evade = false

      $("#heroHealthStat").html("<li class='listTitle'>HEALTH</li><li>" + heroFamiliar.health + " / " + heroFamiliar.maxhealth);

      $("#fightEvasionOrAttack").html("Rolled " + evadeChance + " to evade.  Because familiar's speed is " + heroFamiliar.speed + ", acceptable range for evasion is " + (heroFamiliar.speed - 2) + " - " + (heroFamiliar.speed + 2) + "! &nbsp; Your familiar has evaded the attack!");

    } else if (evade === false) { // if attack hits...
      rollEnemyCriticalChance();
      heroFamiliar.health = heroFamiliar.health - enemyAttackDamage

      if (heroFamiliar.health <= 0) {
        $("#battleButtons").hide();
        $("#fightInstructions").hide();

        $("#battleBox").hide();
        $("#battleEndBox").show();
        $("#defeat").show();

      } else {
        console.log("Your familiar was hit!  Enemy familiar did " + enemyAttackDamage + " attack damage!");

        $("#heroHealthStat").html("<li class='listTitle'>HEALTH</li><li>" + heroFamiliar.health + " / " + heroFamiliar.maxhealth);

        $("#fightEvasionOrAttack").html("Your familiar was hit!  &nbsp; Enemy familiar did " + enemyAttackDamage + " attack damage!");
      }
    }
  } // end of enemyAttack()

function enemyTurn() {
  if (enemySpecialCounter = 0) {
    rollForEnemySpecialAttack(); // 1 in 10 chance of an enemy special attack, can only happen once
    if (enemySpecialTurn === true) {
      $("#fightUpdate").html("Enemy familiar has performed a special attack against your familiar!");
      enemySpecialAttack();
      enemySpecialTurn = false
      enemySpecialCounter = enemySpecialCounter + 1
    } else if (enemySpecialTurn === false) {
      enemyAttack();
    }
  } else {
    enemyAttack();
  }
}

///////

// ***** ------ SUMMON FAMILIAR ------ ***** //

// *** ---  GLOBAL VARIABLES --- *** //
// REROLL COUNT
var rerollCount = 0

// *** --- HIDDEN AT START -- *** //
$("#resultsArea").hide();
$("#summonFamiliarButton").hide();
$("#summonEnemyFamiliarButton").hide();
$("#startFightButton").hide();
$("#attackButton").hide();
$("#specialAttackButton").hide();
$("#nextRoundButton").hide();
$("#battleBox").hide();
$("#battleEndBox").hide();
$("#victory").hide();
$("#defeat").hide();
$("#fightInstructions").hide();

// *** --- INITIAL SUMMON BUTTON -- *** //
$("#summonButton").on("click", function() {
  // summon hero
  summonFamiliar();
  $("#heroFamiliarDescription").text(heroFamiliar.description.toUpperCase());

  $("#heroFamiliarStats").html("<li class='listTitle'>STATS</li><li>STRENGTH: &nbsp;" + strength + "</li><li>" + "HEALTH: &nbsp;" + health + "</li><li>" + "STAMINA: &nbsp;" + stamina + "</li><li>" + "MAGIC: &nbsp;" + magic + "</li><li>" + "SPEED: &nbsp;" + speed + "</li>");

  $("#heroDamageStats").html("<li class='listTitle'>DAMAGE</li><li>" + (heroFamiliar.strength + 1) + " - " + (heroFamiliar.strength + 10) + "</li>");

  if (heroFamiliar.magic <= 0) {
    $("#heroMagicDamageStats").html("<li class='listTitle'>MAGIC DAMAGE</li><li>0</li>");
  } else {
    $("#heroMagicDamageStats").html("<li class='listTitle'>MAGIC DAMAGE</li><li>" + (heroFamiliar.strength * heroFamiliar.magic) + "</li");
  }

  // summon enemy
  summonEnemyFamiliar();
  $("#enemyFamiliarDescription").text(enemyFamiliar.description.toUpperCase());

  $("#enemyFamiliarStats").html("<li class='listTitle'>STATS</li><li>STRENGTH: &nbsp;" + strength + "</li><li>" + "HEALTH: &nbsp;" + health + "</li><li>" + "STAMINA: &nbsp;" + stamina + "</li><li>" + "MAGIC: &nbsp;" + magic + "</li><li>" + "SPEED: &nbsp;" + speed + "</li>");

  $("#enemyDamageStats").html("<li class='listTitle'>DAMAGE</li><li>" + (enemyFamiliar.strength + 1) + " - " + (enemyFamiliar.strength + 10) + "</li>");

  if (enemyFamiliar.magic <= 0) {
    $("#enemyMagicDamageStats").html("<li class='listTitle'>MAGIC DAMAGE</li><li>0</li>");
  } else {
    $("#enemyMagicDamageStats").html("<li class='listTitle'>MAGIC DAMAGE</li><li>" + (enemyFamiliar.strength * enemyFamiliar.magic) + "</li");
  }

  $("#resultsArea").show();
  $("#summonButton").hide();
  $("#summonFamiliarButton").show();
  $("#startFightButton").show();

  $("#heroCounter").text("Number of re-rolls used: " + rerollCount + "/3");
});

// *** --- REROLL FAMILIAR BUTTON -- *** //
$("#summonFamiliarButton").on("click", function() {
  summonFamiliar();
  $("#heroFamiliarDescription").text(heroFamiliar.description.toUpperCase());

  $("#heroFamiliarStats").html("<li class='listTitle'>STATS</li><li>STRENGTH: &nbsp;" + strength + "</li><li>" + "HEALTH: &nbsp;" + health + "</li><li>" + "STAMINA: &nbsp;" + stamina + "</li><li>" + "MAGIC: &nbsp;" + magic + "</li><li>" + "SPEED: &nbsp;" + speed + "</li>");

  $("#heroDamageStats").html("<li class='listTitle'>DAMAGE</li><li>" + (heroFamiliar.strength + 1) + " - " + (heroFamiliar.strength + 10) + "</li>");

  if (heroFamiliar.magic <= 0) {
    $("#heroMagicDamageStats").html("<li class='listTitle'>MAGIC DAMAGE</li><li>0</li>");
  } else {
    $("#heroMagicDamageStats").html("<li class='listTitle'>MAGIC DAMAGE</li><li>" + (heroFamiliar.strength * heroFamiliar.magic) + "</li");
  }

  rerollCount = rerollCount + 1
  $("#heroCounter").text("Number of re-rolls used: " + rerollCount + "/3");
  $("#resultsArea").show();

  if (rerollCount == 3) {
    $("#summonFamiliarButton").hide();
  }
});

// *** --- START FIGHT BUTTON -- *** //

$("#startFightButton").on("click", function() {
  $("#resultsArea").hide();
  $("#summonFamiliarButton").hide();
  $("#heroCounter").hide();
  $("#startFightButton").hide();

  $("#summonInstructions").hide();
  $("#fightInstructions").show();

  $("#attackButton").show();
  $("#specialAttackButton").show();
  $("#battleBox").show();

  $("#battleTitle").html("<span class='heroName'>" + heroFamiliar.description.toUpperCase() + "</span>" + " vs " + "<span class='enemyName'>" + enemyFamiliar.description.toUpperCase() + "</span>");

  $("#heroFightName").text(heroFamiliar.description.toUpperCase());
  $("#enemyFightName").text("ENEMY " + enemyFamiliar.description.toUpperCase());

  if (heroFamiliar.speed >= enemyFamiliar.speed) {
    $("#fightUpdate").html("<span class='heroName'>" + heroFamiliar.description.toUpperCase() + "</span>" + " has a higher speed stat than <span class='enemyName'>" + enemyFamiliar.description.toUpperCase() + "</span>!  &nbsp; You have attacked first!");
    heroAttack();
    $("#heroHealthStat").html("<li class='listTitle'>HEALTH</li><li>" + heroFamiliar.health + " / " + heroFamiliar.maxhealth);
  } else {
    $("#fightUpdate").html("Enemy <span class='enemyName'>" + enemyFamiliar.description.toUpperCase() + "</span>" + " has a higher speed stat than <span class='heroName'>" + heroFamiliar.description.toUpperCase() + "</span>! &nbsp; Enemy has attacked first!");
    enemyAttack();
    $("#enemyHealthStat").html("<li class='listTitle'>HEALTH</li><li>" + enemyFamiliar.health + " / " + enemyFamiliar.maxhealth);
  }
})

// *** --- ATTACK & SPECIAL ATTACK & NEXT ROUND BUTTONS -- *** //

$("#attackButton").on("click", function() {
  heroAttack();
  $("#fightUpdate").html("Your familiar has attacked the enemy familiar!");
  $("#specialEnemyUpdate").text("");
  $("#specialUpdate").text("");
  $("#attackButtons").hide();
  $("#nextRoundButton").show();
})

$("#nextRoundButton").on("click", function() {
  enemyTurn();
  $("#fightUpdate").html("Enemy familiar has attacked your familiar!");
  $("#specialEnemyUpdate").text("");
  $("#specialUpdate").text("");
  $("#attackButtons").show();
  $("#nextRoundButton").hide();
})

$("#specialAttackButton").on("click", function() {
  specialAttack();
  $("#specialAttackButton").hide();
  $("#fightInstructions").hide();
})
